use std::vec::Vec;
use lalrpop_util::ErrorRecovery;

use crate::{ast, error::Error};


grammar<'err>(source: &str, errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, Error>>);

extern {
  type Location = usize;
  type Error = Error;
}

match {
    r"\s*" => { },

    // skip `//` comments
    r"[/]{2}[^/][^\n\r]*[\n\r]" => { },
    r"[/]{4,}[^/][^\n\r]*[\n\r]" => { },
} else {
  _
}

pub Module: ast::Module<'input> = {
  "module" <name: Ident> ";" <stmts: Statement*> => ast::Module {
    name: name,
    statements: stmts,
  }
}

Ident: &'input str = <r"[a-zA-Z_]\w*"> => <>;

DocComment: &'input str = <c: r"[/]{3}[^/].*[\n\r]*"> => &c[3..];

Literal: ast::Literal<'input> = {
  <StringLiteral> => ast::Literal::String(<>),
  <IntegerLiteral> => ast::Literal::Integer(<>),
  <FloatLiteral> => ast::Literal::Float(<>),
  <BooleanLiteral> => ast::Literal::Boolean(<>),
}

StringLiteral: &'input str = {
  <s: r#""([^"\\]|\\.)*""#> => &s[1..s.len()-1]
}

IntegerLiteral: i64 = {
  <s: r#"(-)*[0-9]+"#> => s.parse().unwrap(),
}

FloatLiteral: f64 = {
  <s: r#"(-)*[0-9]+\.[0-9]+"#> => s.parse().unwrap(),
}

BooleanLiteral: bool = {
  "true" => true,
  "false" => false,
}

SepList<T, Sep>: Vec<T> = {
  <mut v: (<T> Sep)*> <e: T?> => match e {
    None => v,
    Some(e) => {
      v.push(e);
      v
    }
  }
}
Surrounded<T, L, R>: T = {
  L <T> R => <>
}

Statement: ast::Statement<'input> = {
  <Schema> => ast::Statement::Schema(<>),
};

Schema: ast::Schema<'input> = {
  "schema" <name: Ident> <properties: Surrounded<SepList<Ident, ",">, "(", ")">?> "{" <fields: SchemaFields> "}" =>
    ast::Schema::Definition(ast::SchemaDefinition {
      name: name,
      fields: fields,
      properties: properties.unwrap_or(Vec::with_capacity(0)),
    }),
  "schema" <name: Ident> <properties: Surrounded<SepList<Ident, ",">, "(", ")">?> "=" <alias: Type> ";" =>
    ast::Schema::Alias(ast::SchemaAlias {
      name: name,
      ty: alias,
      properties: properties.unwrap_or(Vec::with_capacity(0)),
    }),
}


SchemaFields = SepList<SchemaField, ",">;
SchemaField: ast::Field<'input> = {
  <comments: DocComment*> <name: Ident> ":" <ty: Type> => ast::Field {
    name: name,
    ty: ty,
    doc_comment: comments,
    // doc_comment: comments.map(|a|vec![a]).unwrap_or(Vec::with_capacity(0)),
  }
};

Type: ast::Type<'input> = {
  <i: Ident> <generics: Generics?> <properties: Properties?> <optional_mark: "?"?> => 
    ast::Type {
      kind: ast::TypeKind::from(i),
      optional: optional_mark.is_some(),
      generics: generics.unwrap_or(Vec::with_capacity(0)),
      properties: properties.unwrap_or(Vec::with_capacity(0)),
    }
};

Generics = Surrounded<SepList<Type, ",">, "<", ">">; // the syntax highlighter is confused with these quotes "> //

Properties = Surrounded<SepList<Property, ",">, "(", ")">;
Property: ast::Property<'input> = {
  <name: Ident> "=" <value: PropertyValue> => ast::Property {
    name: name,
    value: value,
  }
};

PropertyValue: ast::PropertyValue<'input> = {
  <Ident> => ast::PropertyValue::Ident(<>),
  <Literal> => ast::PropertyValue::Literal(<>),
}

